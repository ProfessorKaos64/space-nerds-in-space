.TH SPACE-NERDS-IN-SPACE "6" "Jan 2014" "snis_server" "Games"
.SH NAME
snis_server \- Multi player cooperative star ship bridge simulator (server) 
.SH SYNOPSIS
.B snis_server
-l lobbyhost
-L location
[ -m multiverse location ]
[ -n servernick ]
[ --enable-enscript ]
.SH DESCRIPTION
.\" Add any additional description here
.warn 511
.PP
snis_server is a server process for the game Space Nerds In Space, which is a
multiplayer starship bridge simulator.  The server process simulates the game
universe and processes input data from client processes and sends outputs to
client processes.  The "location" parameter is used to distinguish one game
instance from another running on the same host (multiple snis_server processes
may be run on the same host).  The location should be a short human readable
string to uniquely identify the game instance and is required.  The lobbyhost
is the hostname of the server hosting the ssgl_server process.
.SH Options:
.TP
\fB\-e, --enable-enscript\fR
Enable the "enscript" command on the Demon screen.  This allows clients to create
files on the server so you should probably leave this off.
.TP
\fB\-i, --initscript scriptname\fR
Use the specified initial lua script instead of the default which is "initialize.lua"
.TP
\fB\-l, --lobbyhost\fR
Set the hostname at which the lobbyhost is running.
.TP
\fB\-L, --location\fR
Set the "location" to be used with the lobby server.  This is just
and arbitrary string for human consumption to differentiate one gameserver
from another.  It is required.
.TP
\fB\-m, --multiverse location\fR
Set the 'location' of the snis_multiverse server to connect to.  snis_server
will monitor the lobby looking for entries with game type of 'SNIS-MVERSE'
(i.e. for instances of snis_multiverse) and with the location field set to
the value specified by the --multiverse option.
.TP
\fB\-v, --version\fR
Print the program's version number and exit.
.SH FILES
.PP
/dev/input/js0, the joystick device node.
.PP
/dev/input/event5, the rumble effect device. 
.PP
/usr/share/snis/sounds/*.ogg contain the audio data used by the game.
.PP
share/snis/luascripts/* -- various lua scripts which may be run to
implement scenarios or missions.
.PP
.SH ENVIRONMENT VARIABLES
.PP
SNISRAND can be set to a random seed to affect universe generation
.PP
SNISSERVERPORT can be used to control the port on which snis_server listens
for new connections.  If not set, a random port number is used which clients
discover via ssgl_server.  If set, the given port number is used (and clients
still discover it via ssgl_server.)
.PP
SNISSERVERNOLOBBY if this is defined the server will not attempt to connect to
the lobby server process "ssgl_server".  Generally SNISSERVERPORT should be used
when SNISSERVERNOLOBBY is used (otherwise you'll have to figure out which port
snis_server is using via e.g. examining output of "netstat -na").
.PP
SNIS_ASSET_DIR can cause the program to use a different directory to read
various assets (models, sounds, etc.) from a different directory allowing
easy substitution of all art assets.   Default is to use share/snis.
.SH SEE ALSO
.PP
snis_client(6), ssgl_server(6), snis_multiverse(6)
.SH GOOD LUCK
.PP
You'll need it.
.SH AUTHOR
Written by Stephen M. Cameron 
.br
