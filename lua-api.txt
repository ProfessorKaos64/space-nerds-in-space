NOTE: I am still working out what the lua api should look like, so
      all of this is subject to change.  But this is what it looks like
      now (barring bitrot of this document, which is not inconceivable.)

Space Nerds In Space lua inteface:

Locations in space nerds in space:
	x,y,z coords, (0,0,0) is the upper left of the known universe,
	Most of the action is more or less confined to the x-z plane.
	Positive x is to the right, negative x is to the left
	Positive z is out of the screen, negative z is into the screen,
	Positive y is up, negative y is down.

	Note: that to the player within the game, the z and y coords are swapped,
	so that *to the player*, positive y is out of the screen, negative y into the
	screen, and positive z is up, negative z is down.  (See user_coords() function
	below.)

	TBD function to return size of known universe?

FACTIONS in snis:

        0 "Neutral",
        1 "Wallunni",
        2 "Schaazbaut",
        3 "Zarkon",
        4 "Vekkazi",

SHIPTYPES in snis:

	SHIP_CLASS_CRUISER 0
	SHIP_CLASS_DESTROYER 1
	SHIP_CLASS_FREIGHTER 2
	SHIP_CLASS_TANKER 3
	SHIP_CLASS_TRANSPORT 4
	SHIP_CLASS_BATTLESTAR 5
	SHIP_CLASS_STARSHIP 6
	SHIP_CLASS_ASTEROIDMINER 7
	SHIP_CLASS_SCIENCE 8
	SHIP_CLASS_SCOUT 9
	SHIP_CLASS_DRAGONHAWK 10 
	SHIP_CLASS_SKORPIO 11 
	SHIP_CLASS_DISRUPTOR 12 
	SHIP_CLASS_RESEARCH_VESSEL 13 

EVENT TYPES in snis:

	"player-respawn-event",
		arguments: object id of player
		return values: none.
	"player-death-event",
		arguments: object id of player
		return values: none.
	"player-docked-event",
		arguments: object id of player, object id of station
		return values none.
	"object-death-event",
		arguments: object id of thing that died.
		Certain types of object deaths are not reported, e.g.
		debris, sparks, laserbeams, torpedoes, explosion objects, tractor beams.
		Only the "important" object deaths are reported.
		(see delete_from_clients_and_server() in snis_server.c)
	"object-hit-event"
		arguments: object id of the thing that was hit by laser or torpedo
		object id of the thing that fired the laser or torpedo

Functions which you may call from lua: 

clear_all() -- this clears the entire universe except for human controlled ships
	all objects are deleted.  Probably you only use this at the beginning of
	a mission script.

id = add_random_ship() -- adds a random ship to the universe in a random location
	returns the "id" of the ship.  If adding ship failed, -1.0 is returned.

id = add_ship(name, x, y, z, type, faction, auto_respawn) -- adds a ship to the
        universe of the specified type and faction at the specified locations.  If
        adding ship failed, -1.0 is returned.

id = add_asterod(x, y, z) -- adds an asteroid at the specified location
	(it will orbit around the center of the universe)

id = add_cargo_container(x, y, z, vx, vy, vz) -- adds a cargo container at specified
	location and velocity

id = add_starbase(x, y, z, n) - adds a starbase at location x,y with number n (0 <= n <= 99).
	the starbase will be named "SB-n"
	TODO: allow starbases to be named arbitrary strings.

id = add_planet(name, x, y, z, r, s) - adds planet at x,y,z with specified name, radius,
	and security (security: 0 = low, 1 = medium, 2 = high)
	returns id of planet or -1.0 on failure.   Radius should be between 800 and 2000.

id = add_nebula(name, x, y, z, r) - adds nebula at x,y with specified radius and name,
	returns id of nebula or -1.0 on failure. 

id = add_spacemonster(name, x, y, z, r) - adds spacemonster at x,y with specified radius and name,
	returns id of spacemonster or -1.0 on failure. 

id1, id2 = add_wormhole_pair(x1, y1, z1, x2, y2, z2) - adds connected wormholes at the
	specified location, returns -1 for a wormhole id that fails to create.

x,y,z = get_object_location(object_id); -- x,y,z location coordinates of specified object.
	If the object_id does not exist (anymore), x,y,z will be nil.

(table of player ship ids) = get_player_ship_ids(); -- returns a table containing the
	ids of all the player ships, indexed 1..n.

	Example:

	player_ids = get_player_ship_ids();
	for i, v in pairs(player_ids) do
		print(i, v);
		x, y, z = get_object_location(v);
		if (x) then
			print("object ", v, " location is ", x, ", ", y, ", ", z);
		else
			print("object ", v, " no longer exists.");
		end
	end

move_object(object_id, x, y, z); -- move object to x, y, z location.

delete_object(object_id) -- delete the specified object from the universe

comms_transmission(object_id, transmission); -- causes the object to transmit the
	specified transmission via comms.

text_to_speech(player_ship_id, text_to_speak); -- causes player ship to use text to speech to
	say the specified text.

register_callback(event, callback); -- event is a string, the name of the event you wish
	to register a callback for, and	callback is a string, the name of the lua function
	you want to get called when that event occurs.  The arguments passed to the lua
	function and return values from the lua function depend on the event (see events,
	above.)

get_object_name(object_id); -- returns string name of specified object

register_timer_callback(callback, timer_ticks, cookie)
	register a function to be called back in timer_ticks (each timer_tick is 1/10th second).
	the cookie value is passed to your callback function.

get_player_damage(id, system); -- returns value of damage to player ship system.
	id is the id of the player's ship (see get_player_ship_ids() above.)
	system is the name of the system for which you want damage info, and must be one of:
        "shields", "impulse" "warp", "maneuvering", "phaser", "sensors", "comms", "tractor"
	The returned value is between 0 (no damage) and (255) max damage, inclusive. 
	nil is returned on error (e.g. bad system, bad id, etc.)

set_player_damage(id, system, value) -- sets the damage of the specified system of the
		specified player.  Id is the id of the player ship, system is the name
		of the system to damage (see get_player_damage() above.)

load_skybox(ship_id, filenameprefix) -- loads a new skybox composed of six images for any clients
	with specified ship id that have the role of main screen.  If filenameprefix is
	the string "x", then the six images are x0.png, x1.png, x2.png, x3.png, x4.png, and
	x5.png.

ux,uy,uz = user_coords(x, y, z) -- returns user (player) coordinates given program coordinates.
	(this really just swaps y and z. ux == x, uy == z, uz == y).

ai_push_patrol(id, nwaypoints, x, y, z, x2, y2, z2, x3, y3, z3, ... )
	set up a patrol route (up to 5 waypoints) for ship with specified id.

ai_push_attack(attacker_id, victim_id)
	make a ship attack something else

set_faction(object_id, faction_id) -- sets the specified object's faction to the specified
	faction.  Clears the object's ai stack.

